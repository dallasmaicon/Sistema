unit mModelConexao_U;

interface

uses
  System.Classes,FireDAC.Comp.Client, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB,
  FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait, Data.DB, System.SysUtils,FireDAC.DApt;

  type
    iModelQuery = interface;

    iModelConexao = interface
      function Connection : TObject;
    end;

    iModelConexaoFactory = interface
      function Conexao : iModelConexao;
      function Query : iModelQuery;
    end;

    iModelQuery = interface
      function Query : TObject;
      function Open(aSQL : String) : iModelQuery;
      function ExecSQL(aSQL : String) : iModelQuery;
    end;

    iModelEntidade = interface
      function DataSet ( aValue : TDataSource ) : iModelEntidade;
      procedure Open;
      procedure ExecSQL(AParam, AValue: string);
    end;

    iModelEntidadeFactory = interface
      function Produto    : iModelEntidade;
      function Cliente    : iModelEntidade;
      function Fornecedor : iModelEntidade;
      function Pagar      : iModelEntidade;
    end;

  Type
    TModelFiredacConexao = class(TInterfacedObject, iModelConexao)
      private
        FConexao : TFDConnection;
      public
        constructor Create;
        destructor Destroy; override;
        class function New : iModelConexao;
        function Connection : TObject;
    end;

  Type
    TModelFiredacQuery = class(TInterfacedObject, iModelQuery)
      private
        FQuery : TFDQuery;
        FConexao : iModelConexao;
      public
        constructor Create(aValue : iModelConexao);
        destructor Destroy; override;
        class function New(aValue : iModelConexao) : iModelQuery;
        function Query : TObject;
        function Open(aSQL : String) : iModelQuery;
        function ExecSQL(aSQL : String) : iModelQuery;
        function ProximoRegsitro(aTabela : string) : Integer;
    end;

implementation

uses
  mModelConfigConexaoFactory_U;

{ TModelFiredacConexao }

function TModelFiredacConexao.Connection: TObject;
begin
  Result := FConexao;
end;

constructor TModelFiredacConexao.Create;
var
  AConexaoINI: TModelConfigConexaoFactory;
  AConexao: TnConexao;
begin
  FConexao := TFDConnection.Create(nil);
  AConexaoINI := TModelConfigConexaoFactory.Create;
  AConexao := AConexaoINI.GetConexao;

  try
    FConexao.Params.DriverID := AConexao.Driver;
    FConexao.Params.Database := AConexao.Caminho;
    FConexao.Params.UserName := AConexao.User;
    FConexao.Params.Password := AConexao.Password;
    FConexao.Connected       := true;
  finally
    FreeAndNil(AConexaoINI);
  end;
end;

destructor TModelFiredacConexao.Destroy;
begin
  FreeAndNil(FConexao);
  inherited;
end;

class function TModelFiredacConexao.New: iModelConexao;
begin
  Result := Self.Create;
end;


{ TModelFiredacQuery }

constructor TModelFiredacQuery.Create(aValue: iModelConexao);
begin
  FConexao := aValue;
  FQuery := TFDQuery.Create(nil);
  FQuery.Connection := TFDConnection(FConexao.Connection);
end;

destructor TModelFiredacQuery.Destroy;
begin
  FreeAndNil(FQuery);
  inherited;
end;

function TModelFiredacQuery.ExecSQL(aSQL: String): iModelQuery;
begin
  Result := Self;
  FQuery.ExecSQL(aSQL);
end;

class function TModelFiredacQuery.New(aValue: iModelConexao): iModelQuery;
begin
  Result := Self.Create(aValue);
end;

function TModelFiredacQuery.Open(aSQL: String): iModelQuery;
begin
  Result := Self;
  FQuery.Open(aSQL);
end;

function TModelFiredacQuery.ProximoRegsitro(aTabela: string): Integer;
begin
  Result := 0;
  FQuery.ExecSQL('select max(CODIGO) AS TOTAL FROM ' + aTabela);
  if FQuery.RecordCount > 0 then
  begin
    if FQuery.FieldByName('TOTAL').AsInteger > 0 then
      Result := FQuery.FieldByName('TOTAL').AsInteger + 1;
  end;
end;

function TModelFiredacQuery.Query: TObject;
begin
  Result := FQuery;
end;

end.
